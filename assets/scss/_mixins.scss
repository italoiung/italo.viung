@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

//Responsive Font Size for main headings
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-font-size, $max-font-size, $min-vw: $screen-xs-min, $max-vw: $screen-xl-min) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);
  @if $u1==$u2 and $u1==$u3 and $u1==$u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

// Extra small devices
@mixin xs {
  @media (min-width: #{$screen-xs-min}) {
    @content;
  }
}

// Small devices
@mixin sm {
  @media (min-width: #{$screen-sm-min}) {
    @content;
  }
}

// Medium devices
@mixin md {
  @media (min-width: #{$screen-md-min}) {
    @content;
  }
}

// Large devices
@mixin lg {
  @media (min-width: #{$screen-lg-min}) {
    @content;
  }
}

// Extra large devices
@mixin xl {
  @media (min-width: #{$screen-xl-min}) {
    @content;
  }
}

// Custom device
@mixin rwd($screen) {
  @media (min-width: $screen) {
    @content;
  }
}

// Extra small devices
@mixin max-xs {
  @media (max-width: #{$screen-sm-min - 0.2}) {
    @content;
  }
}

// Small devices
@mixin max-sm {
  @media (max-width: #{$screen-md-min - 0.2}) {
    @content;
  }
}

// Medium devices
@mixin max-md {
  @media (max-width: #{$screen-lg-min - 0.2}) {
    @content;
  }
}

// Large devices
@mixin max-lg {
  @media (max-width: #{$screen-xl-min - 0.2}) {
    @content;
  }
}

// Custom device
@mixin max-rwd($screen) {
  @media (max-width: $screen) {
    @content;
  }
}

// Custom height media query
@mixin screenHeight($screen) {
  @media (max-height: $screen+"px") {
    @content;
  }
}

@mixin backdropFilterFallback() {
  background-color: rgba(var(--blackRgb), 0.75);
  @supports ((-webkit-backdrop-filter: blur(30px)) or (backdrop-filter: blur(30px))) {
    background-color: transparent;
    backdrop-filter: blur(30px);
  }
}

%cover {
  content: "";
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

%center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
